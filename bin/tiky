#!/usr/bin/env node
const { parse, resolve } = require('path')
const { execSync } = require('child_process')
const program = require('commander')
const inquirer = require('inquirer')
const chalk = require('chalk')
const pkg = require('../package.json')
const { checkExist } = require('../libs/utils')
const { run } = require('../libs/index')

const config = {}

async function executor () {
    const { projectDir, projectName } = config

    const targetPath = resolve(projectDir, projectName)
    
    // check project exist
    const isExitProject = await checkExist(projectDir, projectName)
    if (isExitProject) {
        console.log(chalk.redBright(`WARN: "${targetPath}" has existed.`))

        const { isOverwrite } = await inquirer.prompt({
            type: 'confirm',
            name: 'isOverwrite',
            default: false,
            message: `would you want to override?`
        })

        config.isOverwrite = isOverwrite

        if (!isOverwrite) {
            console.log(chalk.gray('creation is aborted.'))
            return process.exit(0)
        }
    }

    await run(config)
}

const printHeaderInfo = (cwd, name) => {
    console.log()
    console.log(chalk.green.bold(`* TIKY: Creating Project`))
    console.log(chalk.green(`* project: ${chalk.greenBright.bold(name)}`))
    console.log(chalk.green(`* dictionary: ${chalk.greenBright.underline.bold(cwd)}`))
    console.log(chalk.green(`* date: ${chalk.greenBright.bold(new Date().toLocaleString())}`))
    console.log()
}

// version
program.version(pkg.version)

// commands
program
    .name('tiky')
    .usage('<project_name>')

// options

// arguments
program
    .arguments('[project]')
    .action((project = '') => {
        
        const cwd = execSync('pwd').toString().replace('\n', '')
        
        config.projectDir = cwd
        config.projectName = parse(project).name
        
        printHeaderInfo(cwd, config.projectName)

        executor().catch(err => {
            console.log(err)
            process.exit(0)
        }) 
    })

program.parse(process.argv)
